{"ast":null,"code":"import _slicedToArray from \"/Users/gilbertvirgo/portfolio/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/gilbertvirgo/portfolio/frontend/src/components/Master.js\";\nimport React, { useEffect, useState } from \"react\";\nimport screens from \"../screens\";\n\nconst setClassName = (screenIndex, masterIndex) => {\n  if (screenIndex < masterIndex) return \"hiddenAbove\";else if (screenIndex > masterIndex) return \"hiddenBelow\";else return \"\";\n}; // Shorthand. Forms array of screen comopnents and\n// sets props for each depending on masterIndex and\n// screenIndex \n\n\nconst setScreens = masterIndex => screens.map(([, screen], screenIndex) => screen({\n  className: setClassName(screenIndex, masterIndex)\n}));\n\nconst Master = ({\n  match: {\n    params: {\n      id\n    }\n  }\n}) => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        props = _useState2[0],\n        setProps = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        body = _useState4[0],\n        setBody = _useState4[1];\n\n  useEffect(() => {\n    (function () {\n      const masterIndex = id - 1;\n\n      let _screens$masterIndex = _slicedToArray(screens[masterIndex], 1),\n          props = _screens$masterIndex[0];\n\n      setProps(props);\n      setBody(setScreens(masterIndex));\n    })();\n  }, [id]); // Figure out way of animating text off screen?\n\n  return body && React.createElement(\"main\", Object.assign({\n    className: \"master\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), body);\n};\n\nexport default Master;","map":{"version":3,"sources":["/Users/gilbertvirgo/portfolio/frontend/src/components/Master.js"],"names":["React","useEffect","useState","screens","setClassName","screenIndex","masterIndex","setScreens","map","screen","className","Master","match","params","id","props","setProps","body","setBody"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,MAAMC,YAAY,GAAG,CAACC,WAAD,EAAcC,WAAd,KAA8B;AAC/C,MAAGD,WAAW,GAAGC,WAAjB,EAA8B,OAAO,aAAP,CAA9B,KACK,IAAGD,WAAW,GAAGC,WAAjB,EAA8B,OAAO,aAAP,CAA9B,KACA,OAAO,EAAP;AACR,CAJD,C,CAMA;AACA;AACA;;;AACA,MAAMC,UAAU,GAAGD,WAAW,IAC1BH,OAAO,CAACK,GAAR,CAAY,CAAC,GAAGC,MAAH,CAAD,EAAaJ,WAAb,KAA6BI,MAAM,CAAC;AAC5CC,EAAAA,SAAS,EAAEN,YAAY,CAACC,WAAD,EAAcC,WAAd;AADqB,CAAD,CAA/C,CADJ;;AAKA,MAAMK,MAAM,GAAG,CAAC;AAACC,EAAAA,KAAK,EAAE;AAACC,IAAAA,MAAM,EAAE;AAACC,MAAAA;AAAD;AAAT;AAAR,CAAD,KAA6B;AAAA,oBACdZ,QAAQ,CAAC,EAAD,CADM;AAAA;AAAA,QACjCa,KADiC;AAAA,QAC1BC,QAD0B;;AAAA,qBAEhBd,QAAQ,CAAC,IAAD,CAFQ;AAAA;AAAA,QAEjCe,IAFiC;AAAA,QAE3BC,OAF2B;;AAIxCjB,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAW;AACR,YAAMK,WAAW,GAAGQ,EAAE,GAAG,CAAzB;;AADQ,gDAEMX,OAAO,CAACG,WAAD,CAFb;AAAA,UAEHS,KAFG;;AAIRC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,MAAAA,OAAO,CAACX,UAAU,CAACD,WAAD,CAAX,CAAP;AACH,KAND;AAOH,GARQ,EAQN,CAACQ,EAAD,CARM,CAAT,CAJwC,CAcxC;;AAEA,SAAOG,IAAI,IAAI;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA6BF,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACVE,IADU,CAAf;AAGH,CAnBD;;AAqBA,eAAeN,MAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nimport screens from \"../screens\";\n\nconst setClassName = (screenIndex, masterIndex) => {\n    if(screenIndex < masterIndex) return \"hiddenAbove\";\n    else if(screenIndex > masterIndex) return \"hiddenBelow\";\n    else return \"\";\n}\n\n// Shorthand. Forms array of screen comopnents and\n// sets props for each depending on masterIndex and\n// screenIndex \nconst setScreens = masterIndex => \n    screens.map(([, screen], screenIndex) => screen({\n        className: setClassName(screenIndex, masterIndex)\n    }));\n\nconst Master = ({match: {params: {id}}}) => {\n    const [props, setProps] = useState({});\n    const [body, setBody] = useState(null);\n\n    useEffect(() => {\n        (function() {\n            const masterIndex = id - 1;\n            let [props] = screens[masterIndex];\n\n            setProps(props);\n            setBody(setScreens(masterIndex));\n        }) ();\n    }, [id]);\n\n    // Figure out way of animating text off screen?\n\n    return body && <main className=\"master\" {...props}>\n        {body}\n    </main>;\n}\n\nexport default Master;"]},"metadata":{},"sourceType":"module"}